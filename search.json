[
  {
    "objectID": "Courses/Bash/tp_Bash.html",
    "href": "Courses/Bash/tp_Bash.html",
    "title": "Introduction to bash",
    "section": "",
    "text": "The shell is the program which actually processes commands and returns output, e.g., Bash, zsh, etc…\nA terminal refers to a wrapper program which runs a shell.\nThe console is a special sort of terminal (low level).\nReference: https://superuser.com/questions/144666/what-is-the-difference-between-shell-console-and-terminal\n\n\n\nAs you already know bash prompt is a $ sign when you are a standard user. When you are an administrator (often called root user) the prompt is a #.\n\n\n\n\nMany details on the Unix directory structure at https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/\nSome aliases:\n\n~ is an alias to your home directory.\n. is an alias to the current directory.\n.. is an alias to the parent directory.\n\nFor instance\n$ cd ~\n$ pwd\n$ cd ../../home/../etc/../home/\n$ pwd\n\n\n\n\n\n\n### Exercise:\n\n\n1. What is the difference between cd ./toto/tata, cd toto/tata cd ~/toto/tata and cd /toto/tata 2. Use the which command to determine which instance of python is used when you use the python command. Same question with python2.\n\n\n\n\n\n\nTo get some help for a command, please use the man command. You may also use the --help option as in\n$ man ls\n$ ls --help\n\n\n\nA paging program displays, one windowful at a time, the contents of a file on a terminal. It pauses after each windowful and prints on the window status line the screen the file name, current line number, and the percentage of the file so far displayed. This is not an editor (no modification of the file can be done)\nmore (deprecated) less (best choice) most (default on your machine, more feature than less, but bad keybindings).\n$ man less\n$ man most\nUseful tips:\n\nto search for a word type s. To go to the next (resp. previous) occurrence type n (resp. N).\n[less only] to go down type j, to go up type k.\nto go to the beginning of file type g, to the end G.\nTo quit type q.\nto change the default paging program to less.\n$ export MANPAGER=less\n\nMore resources: https://unix.stackexchange.com/questions/81129/what-are-the-differences-between-most-more-and-less\n\n\n\nIt is often very useful to select some files which filename contains (or not!) a specific pattern. Shells (bash, zsh, etc…) comes with a “pattern matching” syntax allowing us to express such constraints on the filenames.\nThis syntax is commonly called globs and is quite simple (more advance syntaxes called regexp will be introduced later on). globs are shell commands and can be transmitted to various program (ls, grep, find, etc…). For instance to display all the files with an extension in .txt in the current directory:\n$ ls *.txt\nMost shells have similar glob rules, and they usually consist of:\n\nA marker for zero-or-more characters: *\nA marker for exactly one character: ?\nA way to express one of a certain set of characters: [...]\nA way to express a choice of one or more strings: {...,...}\nA way to escape any of the above special characters: \\\n\n\n\n\n\n\n\n### Exercise:\n\n\n1. Go to /usr/lib/R/bin/ and list every file starting with a letter R and containing i 2. Go to /usr/lib/R/bin/ and list every file containing the letter c, then any character, and then a n (e.g. config or javareconf) 3. Got to /var/log/ and list every files with a double extension: the former one is a dot followed by a number, the last one is .log (e.g. Xorg.3.log or Xorg.0.log) 4. Got to /var/log/ and list every files with a name starting with a a and containing at least a digit\n\n\n\n\n\n\nTo list the files in a folder use the command ls.\n\n\n\n\n\n\n### Exercise:\n\n\n1. describe the option -a. 2. describe the option -R. 3. describe the option -lh. 4. List all the files in the directory /usr/lib/ without cd in it.\n\n\n\nThe file command can be used to display the information of a file (if not given by the extension itself).\n\n\n\n\n\n\n### Exercise:\n\n\n1. List all the files in the directory /usr/lib/R/bin and sort them by size. 2. Display the type information of the files in /var/log/ one call to file.\n\n\n\n\n\n\nA symbolic link or symlink is a special file containing a reference (a link) to another file or directory. For instance try\n$ ls -l /usr/bin\nA symlink can be created with the command ln.\n$ ln -s target_path link_path\nObiously, replace target_path and link_path by their coresponding values.\n\n\n\n\n\n\n### Exercise:\n\n\n1. Create a symlink called my_etc_dir_link pointing to /etc in your home directory. 2. Then compare the output of ls /etc and ls ~/my_etc_dir_link\n\n\n\n\n\n\nTo list the groups you belong to, in a terminal use the command\n$ groups\nTo list the connected user on your machine\n$ w\n$ who\n\n\n\nEach file has an owner (a user) and a group (a group of users). To change the user that owns use chown and to change the group use chgrp. There are 3 types of permissions:\n\nread r\nwrite w\nexecute x\n\nThere are three permissions triads\n\nfirst triad: what the user can do (letter u)\nsecond triad: what the group members can do (letter g)\nthird triad: what other users can do (letter o)\n\nEach triad\n\nfirst character r: readable\nsecond character w: writable\nthird character x: executable\n\nTo change the permissions of file, use the chmod. For instance, to add execution x right to the owner u:\n$ chmod u+x toto.txt\n\n\n\n\n\n\n### Exercise:\n\n\n1. Create an empty file called foo.py in the current directory 2. Display its owner, group and permissions 3. Change the group of foo.py to pulse 4. Add read and write permissions to user in the group pulse\n\n\n\nRef: https://en.wikipedia.org/wiki/File_system_permissions. See also chown and chgrp\n\n\n\nAn environment variable (in short env or envs) is a dynamic-named value that can affect the way running processes will behave on a computer. Many options of bash may be change with envs. To print all the defined envs:\n$ printenv\nTo display a single variable, you may use the prefix $. For instance, to display the content of PATH\n$ echo ${PATH}\nTo set a new variable (in bash)\n$ export ENV_NAME=toto:tata\nLists are often separated by :. To append a new value at the end\n$ export ENV_NAME=${ENV_NAME}:tutu\n$ echo ${ENV_NAME}\nSome documentation: https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps\n\n\n\n\n\n\n### Exercise:\n\n\n1. Display the PATH env 2. Is the order of the list important?\n\n\n\nUseful tips:\n\nTo avoid setting up an env every time you open a terminal, you can append the export MYENV=xxxxx command to the ~/.bashrc file.\n\n\n\nIn bash, many configuration files are in fact text file. You may need to choose a text editor to modify them. Very powerful (and thus complicated) text editors exist: emacs, vim, but we will focus on nano (gedit is another alternative):\n$ nano\nor joe (default on your system).\n\n\n\n\n\n\n### Exercise:\n\n\n1. Set nano as your default text editor\n\n\n\n\n\n\n\nlist files and get informations: ls, file, find\ndisplay text content: echo, cat, head, tail, grep, fgrep, rgrep\nfile handling: touch, mv, cp, rsync, rename\nunix admin: which, who, top, htop, kill, pkill, killall\n\n\n\n\n\n\n\nTo display the system information\n$ uname -a\nTo show the system hostname you may use hostname command.\nTo show information about your processor use lscpu and to list the devices connected to your machine use lspci.\n\n\n\n\n\n\n### Exercise:\n\n\n1. Determine how many physical core you have on your machine. 2. Determine the vendor of the network card of your machine.\n\n\n\n\n\n\nLearn how to use ps, top, htop, kill, pkill, … reading https://www.tutorialspoint.com/unix/unix-processes.htm\n\n\n\n\n\n\n### Exercise:\n\n\n1. Describe the effect of Ctrl+C in a terminal 2. Describe the effect of Ctrl+Z in a terminal 3. Describe the effect of Ctrl+D in a terminal\n\n\n\n\n\n\n\n\n\nThe dataset we are going to use is available at https://www.data.gouv.fr/fr/datasets/accidents-de-velo-en-france/. We will focus on bicycles accident in France from 2005-2017.\n\n\n\n### Exercise:\n\n\n1. Create a folder data_bicycle and cd to it. 2. Download the .csv file available at the following URL: https://koumoul.com/s/data-fair/api/v1/datasets/accidents-velos/raw as bicycle_db.csv (use the option -O of wget or redirect the output of curl with -o operator described below). Details (in French) on the dataset are available here: https://www.data.gouv.fr/fr/datasets/accidents-de-velo/\n\n\n\n\n\n\nPlease read the manual of tail, head, cat, wc and split\n\n\n\n\n\n\n### Exercise:\n\n\n1. Use the word count wc command to display the number of lines of bicycle_db.csv 2. Display the 53 first line with the head command. Same with the 30 last lines (see tail) 3. Use the split command and its options -d -l and --additional-suffix to create files with a maximum number of lines of 10000 (e.g. :if the number of lines is 55379, you should get only 6 files with names bike00.csv, …, bike05.csv)\n\n\n\n\n\n\ngrep prints lines of a file matching a pattern (regex).\n$ man grep\n\n\n\n\n\n\n### Exercise:\n\n\n1. Count the number of accident in 2005 using the command grep (hint: remark that each line starts with the string \"YYYY where YYYY is the year) 2. Display the line number of the accident occurring on a Wednesday, in October 2017 using a regular expression.\n\n\n\n\n\n\nThe find command search for files in a directory hierarchy. Read the manual. For instance:\n$ find /usr/lib/ -name \"*qt5*\" -type f\nlist all the files in /usr/lib/ containing the qt5 string in its name.\n\n\n\n\n\n\n### Exercise:\n\n\n1. What is the aim of the -exec option? 2. Change the permissions of any file with extension .csv in your home to 777\n\n\n\nReference: https://www.tecmint.com/35-practical-examples-of-linux-find-command/\n\n\n\nTODO\n\n\n\n\n\n\n\nstream image\n\n\nThe I/O of any program launch through the bash are organized in three data streams:\n\nSTDIN (0): standard input (input)\nSTDOUT (1): standard output (data output by the command and printed in the terminal)\nSTDERR (2): standard error (reserved for error messages, also printed in the terminal)\n\nPiping and redirection is the process used to connect these streams between programs and files.\nSee: https://ryanstutorials.net/linuxtutorial/piping.php\n\n\nIn bash the pipe operator is denoted |. It allows to compose (mathematically) the output of a program as an input of another one. For instance to display the 10 largest file given by du (disk use)\n$ du | sort -nr | head\nor display it in a pager\n$ du | sort -nr | less\n\n\n\n\n\n\n### Exercise:\n\n\n1. Display the last 15 accidents occurring with Vent fort condition 2. Display the type of crossing of the accident occurring with Vent fort in 2010. It should return\n\n\nbash Intersection en X Intersection en T Intersection en X\n\n\n\n\n\n\nThe operator > redirect the stdout of a command (LHS) into a file (RHS). Warning! it erases the file content. The operator >> append the output of the LHS to a file.\n$ ls /etc > toto.txt\n$ cat toto.txt\n$ wc -l toto.txt >> toto.txt\n$ cat toto.txt\nFinally, the operator < read from the file (RHS) and send the content to stdin (LHS)\n$ wc -l < toto.txt\n\n\n\n\n\n\n### Exercise:\n\n\n1. Create a single file bike2016.csv containing all the accident that occurred in 2016. 2. Append the accidents of year 2017 to the previous file and then rename it bike2016_17.csv.\n\n\n\n\n\n\n\nA regular expression (shortened as regex or regexp; also referred to as rational expression) is a sequence of characters that define a search pattern. Many language implement such syntaxes (beware, there may be some differences!). Some of the most common regular expressions (share by almost all implementations) are\n\n\\ escape character\n^ start of line\n. any single character\n$ end of line\nx* zero or more occurrence of character x\nx+ one or more occurrences of character x\nx? zero or one occurrence of character x\nx{n} exactly n occurrence of character x\n[...] range of characters (e.g. [a-z], [A-Z], [a-zA-Z], [0-9], etc…)\n[^...] forbidden characters range\n(...) marked subexpression. The string matched within the parentheses can be recalled later (see the next entry, ). A marked subexpression is also called a block or capturing group. …\n\nFor instance, to capture all the word starting with a capital letter in a text, you may use the regexp:\n([A-Z][a-zA-Z0-9_]*)+\nSee https://regexr.com/. See also the doc of the sed, awk programs and the perl language. Reference: https://en.wikipedia.org/wiki/Regular_expression\n\n\n\n### Exercise:\n\n\n1. Go to https://regex101.com/ and copy/paste the following list (in the TEST STRING frame):\n\n\n3. Capture with a regexp all the song names (between the track number and the extension). You should get this in the MATCH INFORMATION frame on the right:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HAX712X: Software development for data science",
    "section": "",
    "text": "(Almost) everything you need to know as an applied mathematician / statistician concerning coding and system administration.\n\n\n\nJoseph Salmon : joseph.salmon@umontpellier.fr,\nBenjamin Charlier : benjamin.charlier@umontpellier.fr\n\nThis course material was improved with the help of some students including:\n\nAmelie Vernay\nTanguy Lefort\n\n\n\n\nStudents are expected to know basic notions of probabilities, optimization, linear algebra and statistics for this course. Some rudiments on coding is also expected (if, for, while, functions) but not mandatory.\n\n\n\nThis course focuses on discovering good coding practices (the language used being Python, but some element of bash and git will also be useful) for professional coding. A special focus on data processing and visualization will be at the heart of the course. We will mostly focus on basic programming concepts, as well as on discovering the Python scientific libraries, including numpy, scipy, pandas, matplotlib, seaborn. Beyond pandas ninja skills, we will also introduce modern practices for coders : (unitary) tests, version control, documentation generation, etc.\n\nBC : (09/09/2022) Introduction to linux essentials and command line tools: regexp, grep, find, rename\nBC : (16/09/2022) IDE: VScode, Python virtual env: Anaconda, Python virtual environment, terminal, etc.\nBC : (23/09/2022) Git: a first introduction, github, ssh key creation, various git commands, conflict, pull request; see also Bonus/, hands on git\nBC (quiz 1) + JS : (30/09/2022) Create a Python Module, classes (__init__, __call__, etc…), operator overloading, files handling,\nJS : (03/10/2022 + 07/10/2022) unit tests\nJS : (10/10/2022 + 14/10/2022) Pandas: first steps / missing data\nJS : (17/10/2022 + 21/10/2022) scipy, numpy: Images/channel\nJS (quiz 2) : (28/10/2022) Sparse matrices, graphs and memory\nBC : (18/11/2022) Documentation with Sphinx\nJS + BC : (09/12/2022) The end: Project presentations\n\n\n\n\n\n\nShort quiz of 20 min each (on Moodle). This will be a personal work.\n\nQuiz 1 BC (30/09/2022, 10%)\nQuiz 2 JS (28/10/2022, 10%)\n\n\n\n\nWarning: the precise details of the projects might evolve before the allocation phase, and a precise grid will be given in the project section.\nWarning: the project repository must show a balanced contribution between group members and intra-group grades variation could be made to reflect issues on the intra-group workload balance.\n\n\n\n1 supplementary point on the final grade of the course can be obtained for contributions improving the course material (practicals, Readme, etc.). See the Bonus section for more details on how to proceed.\n\n\n\n\nThe resources for the course are available on the present github repository. Additional elementary elements (in French) on Python are available in the course HLMA310 and the associated lectures notes IntroPython.pdf.\n\n\n\n(General) : The Missing Semester of Your CS Education\n(Data Science) : J. Van DerPlas, Python Data Science Handbook, With Application to Understanding Data, 2016https://jakevdp.github.io/PythonDataScienceHandbook/\n(General) Skiena, The algorithm design manual, 1998\n(General) Courant et al. , Informatique pour tous en classes préparatoires aux grandes écoles : Manuel d’algorithmique et programmation structurée avec Python, 2013, (french)\n(General/data science) Guttag, Introduction to Computation and Programming, 2016\nAssociated videos: http://jakevdp.githubio/blog/2017/03/03/reproducible-data-analysis-in-jupyter/\n(Code and style) Boswell et Foucher, The Art of Readable Code, 2011\n(Scientific computing tools for Python) http://www.scipy-lectures.org/\n(Visualization) http://openclimatedata.net/"
  }
]